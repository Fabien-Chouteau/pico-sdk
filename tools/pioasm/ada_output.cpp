/*
 * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include <algorithm>
#include <iostream>
#include "output_format.h"
#include "pio_disassembler.h"

struct ada_output : public output_format {
    struct factory {
        factory() {
            output_format::add(new ada_output());
        }
    };

    ada_output() : output_format("ada") {}

    std::string get_description() override {
        return "Ada specification, one file per program";
    }

    FILE *open_spec_output(std::string package_name) {
        std::string spec_file = package_name + ".ads";
        FILE *out = fopen(spec_file.c_str(), "w");
        if (!out) {
            std::cerr << "Can't open output file '" << spec_file << "'" << std::endl;
        }
        return out;
    }

    void output_symbols(FILE *out, const std::vector<compiled_source::symbol> &symbols) {
        int count = 0;
        for (const auto &s : symbols) {
            if (!s.is_label) {
                fprintf(out, "%s : constant := %d;\n", s.name.c_str(), s.value);
                count++;
            }
        }
        if (count) {
            fprintf(out, "\n");
            count = 0;
        }
        for (const auto &s : symbols) {
            if (s.is_label) {
                fprintf(out, "   Offset_%s : constant := %d;\n", s.name.c_str(), s.value);
                count++;
            }
        }
        if (count) {
            fprintf(out, "\n");
        }
    }

    void header(FILE *out, std::string msg) {
        std::string dashes = std::string(msg.length() + 8, '-');
        fprintf(out, "%s\n", dashes.c_str());
        fprintf(out, "--  %s  --\n", msg.c_str());
        fprintf(out, "%s\n", dashes.c_str());
        fprintf(out, "\n");
    }

    int output(std::string destination, std::vector<std::string> output_options,
               const compiled_source &source) override {

        for (const auto &program : source.programs) {
            for(const auto &p : program.lang_opts) {
                if (p.first.size() >= name.size() && p.first.compare(0, name.size(), name) == 0) {
                    std::cerr << "warning: " << name << " does not support output options; " << p.first << " lang_opt ignored.\n";
                }
            }
        }

        for (const auto &program : source.programs) {
            FILE *out = open_spec_output(program.name);
            std::string trailing_comma = ", ";
            if (!out) return 1;

            header(out, "This file is autogenerated by pioasm; do not edit!");
            fprintf(out, "with Interfaces;\n\n");

            fprintf(out, "package %s is\n\n", program.name.c_str());
            output_symbols(out, source.global_symbols);
            fprintf(out, "   Wrap_Target : constant := %d;\n", program.wrap_target);
            fprintf(out, "   Wrap        : constant := %d;\n", program.wrap);
            fprintf(out, "\n");

            output_symbols(out, program.symbols);

            fprintf(out, "   Program_Instructions : constant array (Natural range <>) of Interfaces.Unsigned_16 := (\n");
            for (int i = 0; i < (int)program.instructions.size(); i++) {
                const auto &inst = program.instructions[i];
                if (i == program.wrap_target) {
                    fprintf(out, "         --  .wrap_target\n");
                }
                if (i == (int)program.instructions.size() - 1) {
                    trailing_comma = ");";
                }
                fprintf(out, "         16#%04x#%s --  %2d: %s\n", inst, trailing_comma.c_str(), i,
                        disassemble(inst, program.sideset_bits_including_opt.get(), program.sideset_opt).c_str());
                if (i == program.wrap) {
                    fprintf(out, "         --  .wrap\n");
                }
            }
            fprintf(out, "\n");

            fprintf(out, "end %s;\n", program.name.c_str());
            fclose(out);
        }
        return 0;
    }
};

static ada_output::factory creator;
